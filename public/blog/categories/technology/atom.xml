<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Robby Grossman]]></title>
  <link href="http://rob.by/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://rob.by/"/>
  <updated>2012-11-10T17:36:18-05:00</updated>
  <id>http://rob.by/</id>
  <author>
    <name><![CDATA[Robby Grossman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating to Riak at Shareaholic]]></title>
    <link href="http://rob.by/2012/migrating-to-riak-at-shareaholic/"/>
    <updated>2012-08-31T10:30:00-04:00</updated>
    <id>http://rob.by/2012/migrating-to-riak-at-shareaholic</id>
    <content type="html"><![CDATA[<p>Last night I presented "Migrating to Riak @Shareaholic" at the first <a href="http://www.meetup.com/Boston-Riak/events/77828202">Boston Riak meetup</a></p>

<p>Below are my slides from the talk.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14130056?rel=0" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p>One correction that I've updated in the slides: I mistakenly referenced Shareaholic using Hadoop MapReduce. Shareaholic uses Amazon's Elastic MapReduce, which works similarly to Hadoop but is a separate implementation. My reference is intended only to distinguish it from Riak's MapReduce implementation, which is substantially different.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Risk Mitigation Strategies]]></title>
    <link href="http://rob.by/2012/aws-risk-mitigation-strategies/"/>
    <updated>2012-07-02T10:05:00-04:00</updated>
    <id>http://rob.by/2012/aws-risk-mitigation-strategies</id>
    <content type="html"><![CDATA[<p>Even if you're not ready to roll your own hardware, there's a lot you can do to minimize your risk of downtime on AWS, and to mitigate the effects when it's unavoidable.<!-- more --></p>

<h3>Plan for Brownouts Following Blackouts</h3>

<p>Amazon <a href="http://status.aws.amazon.com/">emphasizes</a> that only "a single availability zone" suffered EC2 and EBS outages, but that is only half the story. The cascading effects that followed are equally important.</p>

<p>For several hours on Friday night, I was unable to bring up a single instance in any of the five US-East availability zones. A commenter correctly <a href="http://news.ycombinator.com/item?id=4182137">pointed out</a> that this is what light utilization reserved instances are for, but in this case that would not have helped. The AWS web console was unreachable, as was the AWS API. I was eventually able to get an "insufficient capacity" error message, at which point a reserved instance may have been helpful, but that was hours later.</p>

<p>I've confirmed that others had similar experiences. A source at a company with AWS Platinum Support told me that Amazon was throttling requests and the spawning of new instances in "unaffected" US-East availability zones. It sounds like a barrage of requests came in to launch new EC2 instances in these other availability zones, and Amazon was unable to support the demand.</p>

<p>At <a href="http://shareaholic.com">Shareaholic</a> we determined a long time ago that implementing full redundancy was not worth the engineering cost. However, that was based on the assumption that if one availability zone went offline, we could bring up new instances in another one immediately to keep our core services operating. This proved to be a flawed assumption. We did not anticipate that the loss of one availability zone would create more demand than Amazon could handle in the other four.</p>

<h3>Use Automated Infrastructure to Save Time and Headaches</h3>

<p>Without exception, what saves me the most time recovering from an AWS outage is that our infrastructure stack is automated with Chef. Deploying new code or provisioning a new server requires only one terminal command.</p>

<p>Automated infrastructure also provides an additional benefit: it serves as documentation for the configuration of every server. Not sure what your haproxy.cfg should look like? It's in Chef. Not sure how to setup your MySQL slave? It's in Chef.</p>

<p>Whether you use Chef, Puppet, Rubber or homegrown deploy scripts, having an automated infrastructure stack saves you time and ensures that you aren't struggling to piece together a working config file at a critical moment.</p>

<h3>Use Low TTL Values for Faster DNS Updates</h3>

<p>At Shareaholic, we set a very low DNS TTL value (300 seconds) on our top level domain so that we can push out DNS updates within five minutes. Unfortunately, this is not 100% reliable: some ISPs do not enforce these low TTL values because they require more frequent fetching. Users of such ISPs resultantly see longer downtime than everybody else. Users whose ISPs react properly receive correct IP addresses within five minutes from when we push an update.</p>

<p>This, combined with our use of Chef, is our best shot at restoring downed services in minutes rather than hours.</p>

<h3>Use Virtualized Hardware, Not Services, to Reduce Risk of Outages</h3>

<p>Amazon Web Services can be used either to virtualize raw hardware (EC2 instances with instance storage) or to virtualize core web services (ELB, EBS, RDS, etc.). This weekend's ELB, EBS and RDS failures demonstrate that you are at much greater risk of a service disruption if you use the latter. None of our instance storage EC2 instances suffered outages.</p>

<p>For this reason, at Shareaholic, we've avoided using AWS' proprietary services whenever possible. Instead of using ELB, we run our own <a href="http://haproxy.1wt.eu/">HAProxy</a> load balancers. This has reliably fixed the problem of visitors getting directed to unresponsive instances when they go down. Unfortunately, it also means that we own the burden of implementing redundant load balancers. We got burned when the AWS API timed out, prohibiting us from reassigning our Elastic IP addresses to our redundant machines. However, we were still able to get our home-grown load balancers back up hours before Amazon resolved its ELB failures.</p>

<p>We've rolled our own MySQL, Redis, MongoDB and Riak for the same reason. We still suffered downtime because we rely on EBS (which is something we'll work to avoid in the future), but our recovery efforts were made easier and more timely by the fact that we manage our data and load balancing stacks in-house.</p>

<h3>Determine in Advance What Risks You're Willing to Take</h3>

<p>My post-downtime debrief boils down to one question:</p>

<p><em>Knowing what we know now, what engineering work would have been worth doing in advance to mitigate the downtime we just had?</em></p>

<p>Usually my answer to this question is "none." This varies by business, but a few hours to a day of downtime per year is often less expensive than the engineering required to avoid it.</p>

<h3>In Conclusion</h3>

<p>Amazon Web Services is not one big service that stays up or goes down. It is comprised of many services of varying complexity. By understanding their individual reliabilities, organizations can engineer around many of AWS' shortcomings.</p>

<p>Still, there's no silver bullet. When things do go wrong, the responsibility of recovery falls on you, the AWS customer. By determining in advance what risks you're willing to take, preparing your DNS for faster updates and automating the generation of your infrastructure, you can respond more quickly when you need to.</p>

<p><em>Thanks to <a href="http://graysky.org">Mike Champion</a> and <a href="http://nirvdrum.com">Kevin Menard</a> for proofreading this post.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GarageBand Has Found Its Interface]]></title>
    <link href="http://rob.by/2011/garageband-has-found-its-interface/"/>
    <updated>2011-03-16T00:29:55-04:00</updated>
    <id>http://rob.by/2011/garageband-has-found-its-interface</id>
    <content type="html"><![CDATA[<p>This is what you can do with GarageBand for iPad in about 2 hours:</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://robby-blog.s3.amazonaws.com/music/garage-band-jam.m4a' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video><!--more--></p>

<p><a href="http://robby-blog.s3.amazonaws.com/music/garage-band-jam.m4a">Download link</a></p>

<p>I wrote this song for the purpose of trying GarageBand for iPad this evening. I used vocals, guitars and virtual instruments in ways that I believe most people would use them, and I capped the project at two hours.</p>

<h2>Composition</h2>

<p>The above song was recorded entirely on a <strong>first generation iPad</strong>. It consists of eight virtual tracks: two recorded acoustic guitars, two recorded vocal tracks, two recorded electric guitars, a virtual bass, and a virtual drumkit. All audio tracks were recorded with the iPad's internal condenser microphone.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Final_Track_Layout.png" alt="Final Track Layout" /></p>

<h2>Recording Process</h2>

<p>The two acoustic guitar tracks are panned about 75% left and 75% right. The left is strumming chords; the right is alternating between chords and arpeggiated notes. I chose the "small room" preset for both to provide ambiance.</p>

<p>The two vocal tracks are separate takes of the same lines, panned about two thirds left and two thirds right. This process provides a full sound without requiring any unnatural reverb (Elliott Smith is perhaps best known for using this technique; John Lennon and Bon Iver have also employed it).</p>

<p>The two electric guitar tracks are panned about 60% each way. These are not virtual instruments; they are real electric guitars played through a Fender Pro Junior amp. I struggled to maintain a consistent volume because even at 15 watts my Pro Junior was too loud for the iPad's internal mic. I got the levels manageable with a makeshift damper made from tissues.</p>

<p>I created the virtual bass lines by plucking individual strings from chords in the selected key. Non-musicians will appreciate this method because they can improvise without the risk of playing out of key. Musicians, and particularly composers, will find this limiting. There were a couple times when I wanted to create dissonance, and had to change the key in order to pluck an intermediate semitone.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Virtual_Bass.png" alt="GarageBand Virtual Bass" /></p>

<p>The virtual drumkit is by far the most fun part of creating songs. GarageBand provides two ways to lay down your beats:</p>

<p>The first is a clickable drumset that plays the drum you tap at the time you tap it. Overdubs are allowed within a single track, so you can focus on one drum per take and get the timing right. If you have a specific drumbeat in your head, this is the method you'll need to use to translate it for the virtual drumset. GarageBand lets you quantize virtual instruments (up to the nearest 64th note), so you can stay on rhythm even if your hands aren't perfect.</p>

<p>The other means of entry is a grid onto which you place drums. The grid ranges from simple to complex and from quiet to loud. If you want to experiment with beats or just get a rhythm down to record with (metronomes are boring), this is the quickest way to get up and running. You can also click the die to generate a random beat.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Virtual_Drums.png" alt="GarageBand Virtual Drums" /></p>

<h2>Impressions</h2>

<p>GarageBand has found its interface (spoiler: it comes in a 9.7" version, but not 13", 15" or 17"). Buttons that you actually push. Sliders that you actually slide. Drums that you actually hit. Good riddance, mouse; you will not be missed. It feels like this is what the iPad was made to do.</p>

<p>But the impressiveness of the interface is only half of why GarageBand for iPad is so great. The other half is that Apple has proven that the whole of the iPad is greater than the sum of its parts. It isn't that the GarageBand keyboard has better sensitivity and sound than Pianist (though it does), or that the virtual guitar is easier to use than Air Guitar (though it is), or that the beat sequencers are easier to use than Korg's iElectribe (though they are), or that the drums sound better than those of JamPad (though they do), or that the recording interface is smoother than FourTrack's (though it is). It's that all of these things are now integrated perfectly into part of a larger whole. It is an all-in-one-piece music creation suite, and it is the most capable one on the market.</p>

<p>The closest competition it has is the <a href="http://www.bossus.com/gear/productdetails.php?ProductId=818">Boss Micro BR</a>, which trails far behind in several respects. GarageBand is easy and intuitive to use while the Micro BR's functionality is arcane; GarageBand supports eight tracks while the Micro BR supports only four; GarageBand provides several virtual instruments while the Micro BR provides none. The Micro BR is smaller (5.5"x3.25x0.875"), which makes it slightly more portable, but this also contributes to its poor usability. My Micro BR has served me well for years. Tomorrow it goes up on Craigslist.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/micro-br.jpg" alt="Boss Micro BR" /></p>

<h2>Room for Improvement</h2>

<p>I'd like to see an input level adjustment in the next version. Controlling individual track volumes at playback time is not sufficient for this purpose, especially for songs that vary from quiet vocals to loud, distorted guitars.</p>

<p>A more traditional drum machine interface (with individual tracks for each drum laid out on a timeline) would be helpful for creating drumbeats that exist in my head. The touch sensitivity of the on-screen drumset is impressive but imperfect. It's frustrating to get through 14 out of 16 measures and then miss a beat.</p>

<p>The condenser mic in my iPad (again, first generation) is acceptable, but leaves something to be desired, particularly on the high end. I don't know if this mic has been upgraded in the iPad2, but something of higher quality would be much appreciated. In the mean the <a href="http://www.amazon.com/Blue-Microphones-Yeti-USB-Microphone/dp/B002VA464S/ref=sr_1_1?ie=UTF8&amp;qid=1300250784&amp;sr=8-1">Blue Yeti</a> is an excellent USB microphone, and works with the <a href="http://store.apple.com/us/product/MC531ZM/A">camera connection kit</a>. Obviously, this makes the setup much less portable.</p>

<h2>A Note on iPad vs iPad 2 Performance</h2>

<p>GarageBand's performance on my first generation iPad was noticeably but not painfully sluggish. The most frequent lag occurs when switching between the track and recording screens. It lasts for about one second.</p>

<p>There is another lag, longer in duration but less frequent in occurrence, that I ran into seemingly arbitrarily. A box will pop up that says "Optimizing Performance" and you will have to wait 15-20 seconds while it chugs along. I encountered this four or five times over the course of two hours. I suspect what GarageBand is doing is loading audio content into and out of RAM. If that's the case, then performance should be better on the iPad 2, which has 512MB as opposed to the 256MB of the original.</p>

<h2>TL;DR</h2>

<p>GarageBand for iPad is the most complete and capable all-in-one music creation package available anywhere. It's fun, it's easy, and it's effective. At $4.99, it has replaced my $220 Micro BR.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middle Management for Your Heroku Workers]]></title>
    <link href="http://rob.by/2011/middle-management-for-your-heroku-workers/"/>
    <updated>2011-01-20T10:52:03-05:00</updated>
    <id>http://rob.by/2011/middle-management-for-your-heroku-workers</id>
    <content type="html"><![CDATA[<p>Heroku provides a highly scalable <a href="http://docs.heroku.com/background-jobs">background worker framework via delayed_job</a>, but leaves the burden of scaling it to the user. Several people have tried to solve this by either <a href="https://github.com/wxmn/delayed_job">forking the delayed_job gem</a> or hooking into the gold standard <a href="https://github.com/phaza/Heroku-Delayed-Job-Autoscale">collectiveidea gem</a>. I like the latter approach, but haven't seen an implementation that meets my requirements.<!--more--></p>

<p>Specifically, I want the following in my scaling library:</p>

<ol>
<li><p>Don't require any special third party forks.</p></li>
<li><p>Let me set minimum and maximum worker counts -- and change them without redeploying.</p></li>
<li><p>Let me set how busy I want my workers to be.</p></li>
<li><p>Work out of the box with minimal configuration.</p></li>
</ol>


<p>To achieve these things, I built <a href="https://github.com/freerobby/middle_management">middle_management</a>.</p>

<p>You can get up and running with it very quickly:</p>

<ol>
<li><p>Add "middle_management" to your Gemfile</p></li>
<li><p>Set the required heroku environment variables (MIDDLE_MANAGEMENT_HEROKU_USERNAME, MIDDLE_MANAGEMENT_HEROKU_PASSWORD, MIDDLE_MANAGEMENT_HEROKU_APP, MIDDLE_MANAGEMENT_MIN_WORKERS, MIDDLE_MANAGEMENT_MAX_WORKERS).</p></li>
<li><p>Deploy.</p></li>
</ol>


<p>The <a href="https://github.com/freerobby/middle_management">code</a> is on github and the <a href="https://rubygems.org/gems/middle_management">gem</a> is on Rubygems. Check out the <a href="https://github.com/freerobby/middle_management/blob/master/README">readme</a> for further details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Technical Cofounders Is Hard]]></title>
    <link href="http://rob.by/2010/finding-technical-cofounders-is-hard/"/>
    <updated>2010-08-17T10:18:25-04:00</updated>
    <id>http://rob.by/2010/finding-technical-cofounders-is-hard</id>
    <content type="html"><![CDATA[<p>Yesterday, Michael Pope posted an article titled <a href="http://captainrecruiter.blogspot.com/2010/08/technical-co-founders-are-myth.html"><em>Technical Cofounders Are a Myth</em></a>. He argued that software engineers don't finish what they start, and that you're better off paying a technical person than partnering with one. His frustrations are valid and not uncommon, but his conclusions are way off base for a lot of reasons.<!--more--></p>

<p>He begins by explaining how he arrived at his conclusion:</p>

<blockquote><p>I began the hunt to find a technical co-founder - a software engineer  who works for no cash - to help me build my dream website.  Twelve  months into my startup journey I had four half-built websites that had  been built by my four ex-technical co-founders.</p></blockquote>

<p>It's entirely possible that he picked four flaky technical cofounders. But it's also possible that:</p>

<ul>
<li><p>He didn't communicate his idea and vision well enough for them to be implemented.</p></li>
<li><p>His idea was too vague or his vision changed too often to be fully realized.</p></li>
<li><p>He had trouble selling his  credentials to his cofounders, causing them to lose faith in him.</p></li>
<li><p>He was a <a href="http://rob.by/wp-content/uploads/everybodyworks.png">delegator, not a doer</a>. (link goes to <em>Everybody Works</em> from 37signals' <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1282018997&amp;sr=8-1">Rework</a>)</p></li>
<li><p>He picked engineers who were technically-driven but not entrepreneurially-driven.</p></li>
<li><p>He picked engineers who weren't comfortable taking risks as great as he wanted to take.</p></li>
<li><p>He was difficult to work with.</p></li>
<li><p>His cofounders felt he wasn't was pulling his own weight.</p></li>
</ul>


<p>I don't know Michael, and I'm not leveling any accusations here. There are many possibilities for what went wrong. But the simple fact that things did go wrong is not a referendum on the value of having a technical cofounder, nor is it sufficient evidence to conclude that good technical cofounders don't exist.</p>

<p>Michael's second problem comes from holding software engineers to an unprecedented standard of business savviness:</p>

<blockquote><p>Most software engineers aren't business people.  The only way a software  engineer can tell a business idea is a viable is to see the money  coming in.  A business geek with no money and no income isn't going to  inspire confidence in a software geek.  If a software geek really wants  to try building something for no pay, they're going to work for themself  instead of following another cashless entrepreneur.</p></blockquote>

<p>There are three double standards here. First, it's true that "most software engineers aren't business people." But it's also true that most <em>people</em> aren't business people. If you are looking for a business-savvy technical cofounder, then your requirement is not merely a "software engineer." I'm a fan of Micah Baldwin's post on <a href="http://learntoduck.com/micah/hackers-hustlers">Hackers and Hustlers</a>. If you want a technical cofounder, look for a hacker as Micah describes it.</p>

<p>Second, <em>nobody</em> knows the viability of a business idea without seeing financial numbers. Picking winners is <a href="http://www.slideshare.net/angelbootcamp/simeon-simeonov-june-2010">extremely difficult, and doesn't work</a>. When it comes to picking the next big thing, the best VCs have worse batting averages than MLB pitchers. It's not just software engineers who are lacking in this department. Furthermore, there's more to a business than the idea. There's the team. There's execution. There's competition. None of these things are entirely predictable, even for the most savvy people in the industry. If they were predictable, investing wouldn't have risk.</p>

<p>Third, most people, not just software engineers, would choose to work for themselves if they could do it in a financially viable and risk-minimized way. What makes software engineers different in the startup world is that they have the requisite skills to hack together an idea on their own if they so choose. But software engineers also pay a price for working by themselves. It means they have to deal with finances and customers and investors and other things that aren't what they love to do, which is building software. I have side projects, and I hold entrepreneurial ambitions. I absolutely want cofounders when the time comes.</p>

<p>Michael's last gripe is that "software engineers don't work for free." I believe that by this he means they want cash rather than equity. Based on counterexamples I know for a fact that this is an over-generalization. But conceptually it does ring of some truth. Let's examine why this is the case.</p>

<p>"Business people" and "software people" are misnomers. A  "business person" can fall anywhere on the charts of aptitude, skills, education, experience, wits, and a handful of other areas relevant to starting a company. A "software person" on the other hand is more narrowly defined. Skills and education are a known quantity, and experience is more easily described. These traits of a software engineer are always in demand by a great number of companies.</p>

<p>Business people have it tougher. A business person may have equal or more valuable skills than a software person, but they   are not universally understood in the simplistic way that software people's skills are. Ask anybody what a software developer does and they can give you the one-sentence "makes software" answer. Ask them what a "business person" does and you'll be lucky to get a coherent sentence. That's because business people cover a wider range of skills and responsibilities; the work they do is more varied.</p>

<p>My hunch is that most good software engineers only work for cash because they don't feel that working for equity is worth the risk of failure. They can make good money consulting or working as an employee of another company. They can easily get great benefits and a six figure salary. The risk of failure doesn't seem worth it, especially when the potential reward seems so far away. But an important distinction is that this has to do with their options, not with their profession. If we look at business people who have skills-specific training like software people have, they fall in a similar risk-averse bucket: <a href="http://www.asktheharvardmba.com/2009/07/03/how-many-graduating-harvard-mbas-start-their-own-businesses/">only 3% of Harvard MBAs use their educations to start a company</a>.</p>

<p>A more appropriate conclusion to draw from Michael's experience, and one I see first-hand in the startup world every day, is that finding good cofounders is very difficult. One need only look at the necessary traits to find that the odds are stacked against the seeker: you need somebody you trust (ideally whom you know well), who shares your ambition, who complements your strengths, who compensates for your weaknesses, who is in a life position to take a big risk, and who is in a financial position to afford to take such a risk. Forget the haystack; you're looking for a needle in a field.</p>

<p>Finding good <em>technical</em> cofounders is particularly difficult. This isn't because technical people are flakier or inherently less entrepreneurial; it's because by definition they have a narrower set of highly in-demand skills. They have lots of options because, for every one of them there are several "business people" trying to get their attention.</p>
]]></content>
  </entry>
  
</feed>
