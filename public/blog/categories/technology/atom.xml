<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Robby Grossman]]></title>
  <link href="http://rob.by/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://rob.by/"/>
  <updated>2012-07-01T13:24:41-04:00</updated>
  <id>http://rob.by/</id>
  <author>
    <name><![CDATA[Robby Grossman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GarageBand Has Found Its Interface]]></title>
    <link href="http://rob.by/2011/garageband-has-found-its-interface/"/>
    <updated>2011-03-16T00:29:55-04:00</updated>
    <id>http://rob.by/2011/garageband-has-found-its-interface</id>
    <content type="html"><![CDATA[<p>This is what you can do with GarageBand for iPad in about 2 hours:</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://robby-blog.s3.amazonaws.com/music/garage-band-jam.m4a' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video><!--more--></p>

<p><a href="http://robby-blog.s3.amazonaws.com/music/garage-band-jam.m4a">Download link</a></p>

<p>I wrote this song for the purpose of trying GarageBand for iPad this evening. I used vocals, guitars and virtual instruments in ways that I believe most people would use them, and I capped the project at two hours.</p>

<h2>Composition</h2>

<p>The above song was recorded entirely on a <strong>first generation iPad</strong>. It consists of eight virtual tracks: two recorded acoustic guitars, two recorded vocal tracks, two recorded electric guitars, a virtual bass, and a virtual drumkit. All audio tracks were recorded with the iPad's internal condenser microphone.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Final_Track_Layout.png" alt="Final Track Layout" /></p>

<h2>Recording Process</h2>

<p>The two acoustic guitar tracks are panned about 75% left and 75% right. The left is strumming chords; the right is alternating between chords and arpeggiated notes. I chose the "small room" preset for both to provide ambiance.</p>

<p>The two vocal tracks are separate takes of the same lines, panned about two thirds left and two thirds right. This process provides a full sound without requiring any unnatural reverb (Elliott Smith is perhaps best known for using this technique; John Lennon and Bon Iver have also employed it).</p>

<p>The two electric guitar tracks are panned about 60% each way. These are not virtual instruments; they are real electric guitars played through a Fender Pro Junior amp. I struggled to maintain a consistent volume because even at 15 watts my Pro Junior was too loud for the iPad's internal mic. I got the levels manageable with a makeshift damper made from tissues.</p>

<p>I created the virtual bass lines by plucking individual strings from chords in the selected key. Non-musicians will appreciate this method because they can improvise without the risk of playing out of key. Musicians, and particularly composers, will find this limiting. There were a couple times when I wanted to create dissonance, and had to change the key in order to pluck an intermediate semitone.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Virtual_Bass.png" alt="GarageBand Virtual Bass" /></p>

<p>The virtual drumkit is by far the most fun part of creating songs. GarageBand provides two ways to lay down your beats:</p>

<p>The first is a clickable drumset that plays the drum you tap at the time you tap it. Overdubs are allowed within a single track, so you can focus on one drum per take and get the timing right. If you have a specific drumbeat in your head, this is the method you'll need to use to translate it for the virtual drumset. GarageBand lets you quantize virtual instruments (up to the nearest 64th note), so you can stay on rhythm even if your hands aren't perfect.</p>

<p>The other means of entry is a grid onto which you place drums. The grid ranges from simple to complex and from quiet to loud. If you want to experiment with beats or just get a rhythm down to record with (metronomes are boring), this is the quickest way to get up and running. You can also click the die to generate a random beat.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Virtual_Drums.png" alt="GarageBand Virtual Drums" /></p>

<h2>Impressions</h2>

<p>GarageBand has found its interface (spoiler: it comes in a 9.7" version, but not 13", 15" or 17"). Buttons that you actually push. Sliders that you actually slide. Drums that you actually hit. Good riddance, mouse; you will not be missed. It feels like this is what the iPad was made to do.</p>

<p>But the impressiveness of the interface is only half of why GarageBand for iPad is so great. The other half is that Apple has proven that the whole of the iPad is greater than the sum of its parts. It isn't that the GarageBand keyboard has better sensitivity and sound than Pianist (though it does), or that the virtual guitar is easier to use than Air Guitar (though it is), or that the beat sequencers are easier to use than Korg's iElectribe (though they are), or that the drums sound better than those of JamPad (though they do), or that the recording interface is smoother than FourTrack's (though it is). It's that all of these things are now integrated perfectly into part of a larger whole. It is an all-in-one-piece music creation suite, and it is the most capable one on the market.</p>

<p>The closest competition it has is the <a href="http://www.bossus.com/gear/productdetails.php?ProductId=818">Boss Micro BR</a>, which trails far behind in several respects. GarageBand is easy and intuitive to use while the Micro BR's functionality is arcane; GarageBand supports eight tracks while the Micro BR supports only four; GarageBand provides several virtual instruments while the Micro BR provides none. The Micro BR is smaller (5.5"x3.25x0.875"), which makes it slightly more portable, but this also contributes to its poor usability. My Micro BR has served me well for years. Tomorrow it goes up on Craigslist.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/micro-br.jpg" alt="Boss Micro BR" /></p>

<h2>Room for Improvement</h2>

<p>I'd like to see an input level adjustment in the next version. Controlling individual track volumes at playback time is not sufficient for this purpose, especially for songs that vary from quiet vocals to loud, distorted guitars.</p>

<p>A more traditional drum machine interface (with individual tracks for each drum laid out on a timeline) would be helpful for creating drumbeats that exist in my head. The touch sensitivity of the on-screen drumset is impressive but imperfect. It's frustrating to get through 14 out of 16 measures and then miss a beat.</p>

<p>The condenser mic in my iPad (again, first generation) is acceptable, but leaves something to be desired, particularly on the high end. I don't know if this mic has been upgraded in the iPad2, but something of higher quality would be much appreciated. In the mean the <a href="http://www.amazon.com/Blue-Microphones-Yeti-USB-Microphone/dp/B002VA464S/ref=sr_1_1?ie=UTF8&amp;qid=1300250784&amp;sr=8-1">Blue Yeti</a> is an excellent USB microphone, and works with the <a href="http://store.apple.com/us/product/MC531ZM/A">camera connection kit</a>. Obviously, this makes the setup much less portable.</p>

<h2>A Note on iPad vs iPad 2 Performance</h2>

<p>GarageBand's performance on my first generation iPad was noticeably but not painfully sluggish. The most frequent lag occurs when switching between the track and recording screens. It lasts for about one second.</p>

<p>There is another lag, longer in duration but less frequent in occurrence, that I ran into seemingly arbitrarily. A box will pop up that says "Optimizing Performance" and you will have to wait 15-20 seconds while it chugs along. I encountered this four or five times over the course of two hours. I suspect what GarageBand is doing is loading audio content into and out of RAM. If that's the case, then performance should be better on the iPad 2, which has 512MB as opposed to the 256MB of the original.</p>

<h2>TL;DR</h2>

<p>GarageBand for iPad is the most complete and capable all-in-one music creation package available anywhere. It's fun, it's easy, and it's effective. At $4.99, it has replaced my $220 Micro BR.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middle Management for Your Heroku Workers]]></title>
    <link href="http://rob.by/2011/middle-management-for-your-heroku-workers/"/>
    <updated>2011-01-20T10:52:03-05:00</updated>
    <id>http://rob.by/2011/middle-management-for-your-heroku-workers</id>
    <content type="html"><![CDATA[<p>Heroku provides a highly scalable <a href="http://docs.heroku.com/background-jobs">background worker framework via delayed_job</a>, but leaves the burden of scaling it to the user. Several people have tried to solve this by either <a href="https://github.com/wxmn/delayed_job">forking the delayed_job gem</a> or hooking into the gold standard <a href="https://github.com/phaza/Heroku-Delayed-Job-Autoscale">collectiveidea gem</a>. I like the latter approach, but haven't seen an implementation that meets my requirements.<!--more--></p>

<p>Specifically, I want the following in my scaling library:</p>

<ol>
<li><p>Don't require any special third party forks.</p></li>
<li><p>Let me set minimum and maximum worker counts -- and change them without redeploying.</p></li>
<li><p>Let me set how busy I want my workers to be.</p></li>
<li><p>Work out of the box with minimal configuration.</p></li>
</ol>


<p>To achieve these things, I built <a href="https://github.com/freerobby/middle_management">middle_management</a>.</p>

<p>You can get up and running with it very quickly:</p>

<ol>
<li><p>Add "middle_management" to your Gemfile</p></li>
<li><p>Set the required heroku environment variables (MIDDLE_MANAGEMENT_HEROKU_USERNAME, MIDDLE_MANAGEMENT_HEROKU_PASSWORD, MIDDLE_MANAGEMENT_HEROKU_APP, MIDDLE_MANAGEMENT_MIN_WORKERS, MIDDLE_MANAGEMENT_MAX_WORKERS).</p></li>
<li><p>Deploy.</p></li>
</ol>


<p>The <a href="https://github.com/freerobby/middle_management">code</a> is on github and the <a href="https://rubygems.org/gems/middle_management">gem</a> is on Rubygems. Check out the <a href="https://github.com/freerobby/middle_management/blob/master/README">readme</a> for further details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Technical Cofounders Is Hard]]></title>
    <link href="http://rob.by/2010/finding-technical-cofounders-is-hard/"/>
    <updated>2010-08-17T10:18:25-04:00</updated>
    <id>http://rob.by/2010/finding-technical-cofounders-is-hard</id>
    <content type="html"><![CDATA[<p>Yesterday, Michael Pope posted an article titled <a href="http://captainrecruiter.blogspot.com/2010/08/technical-co-founders-are-myth.html"><em>Technical Cofounders Are a Myth</em></a>. He argued that software engineers don't finish what they start, and that you're better off paying a technical person than partnering with one. His frustrations are valid and not uncommon, but his conclusions are way off base for a lot of reasons.<!--more--></p>

<p>He begins by explaining how he arrived at his conclusion:</p>

<blockquote><p>I began the hunt to find a technical co-founder - a software engineer  who works for no cash - to help me build my dream website.  Twelve  months into my startup journey I had four half-built websites that had  been built by my four ex-technical co-founders.</p></blockquote>

<p>It's entirely possible that he picked four flaky technical cofounders. But it's also possible that:</p>

<ul>
<li><p>He didn't communicate his idea and vision well enough for them to be implemented.</p></li>
<li><p>His idea was too vague or his vision changed too often to be fully realized.</p></li>
<li><p>He had trouble selling his  credentials to his cofounders, causing them to lose faith in him.</p></li>
<li><p>He was a <a href="http://rob.by/wp-content/uploads/everybodyworks.png">delegator, not a doer</a>. (link goes to <em>Everybody Works</em> from 37signals' <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1282018997&amp;sr=8-1">Rework</a>)</p></li>
<li><p>He picked engineers who were technically-driven but not entrepreneurially-driven.</p></li>
<li><p>He picked engineers who weren't comfortable taking risks as great as he wanted to take.</p></li>
<li><p>He was difficult to work with.</p></li>
<li><p>His cofounders felt he wasn't was pulling his own weight.</p></li>
</ul>


<p>I don't know Michael, and I'm not leveling any accusations here. There are many possibilities for what went wrong. But the simple fact that things did go wrong is not a referendum on the value of having a technical cofounder, nor is it sufficient evidence to conclude that good technical cofounders don't exist.</p>

<p>Michael's second problem comes from holding software engineers to an unprecedented standard of business savviness:</p>

<blockquote><p>Most software engineers aren't business people.  The only way a software  engineer can tell a business idea is a viable is to see the money  coming in.  A business geek with no money and no income isn't going to  inspire confidence in a software geek.  If a software geek really wants  to try building something for no pay, they're going to work for themself  instead of following another cashless entrepreneur.</p></blockquote>

<p>There are three double standards here. First, it's true that "most software engineers aren't business people." But it's also true that most <em>people</em> aren't business people. If you are looking for a business-savvy technical cofounder, then your requirement is not merely a "software engineer." I'm a fan of Micah Baldwin's post on <a href="http://learntoduck.com/micah/hackers-hustlers">Hackers and Hustlers</a>. If you want a technical cofounder, look for a hacker as Micah describes it.</p>

<p>Second, <em>nobody</em> knows the viability of a business idea without seeing financial numbers. Picking winners is <a href="http://www.slideshare.net/angelbootcamp/simeon-simeonov-june-2010">extremely difficult, and doesn't work</a>. When it comes to picking the next big thing, the best VCs have worse batting averages than MLB pitchers. It's not just software engineers who are lacking in this department. Furthermore, there's more to a business than the idea. There's the team. There's execution. There's competition. None of these things are entirely predictable, even for the most savvy people in the industry. If they were predictable, investing wouldn't have risk.</p>

<p>Third, most people, not just software engineers, would choose to work for themselves if they could do it in a financially viable and risk-minimized way. What makes software engineers different in the startup world is that they have the requisite skills to hack together an idea on their own if they so choose. But software engineers also pay a price for working by themselves. It means they have to deal with finances and customers and investors and other things that aren't what they love to do, which is building software. I have side projects, and I hold entrepreneurial ambitions. I absolutely want cofounders when the time comes.</p>

<p>Michael's last gripe is that "software engineers don't work for free." I believe that by this he means they want cash rather than equity. Based on counterexamples I know for a fact that this is an over-generalization. But conceptually it does ring of some truth. Let's examine why this is the case.</p>

<p>"Business people" and "software people" are misnomers. A  "business person" can fall anywhere on the charts of aptitude, skills, education, experience, wits, and a handful of other areas relevant to starting a company. A "software person" on the other hand is more narrowly defined. Skills and education are a known quantity, and experience is more easily described. These traits of a software engineer are always in demand by a great number of companies.</p>

<p>Business people have it tougher. A business person may have equal or more valuable skills than a software person, but they   are not universally understood in the simplistic way that software people's skills are. Ask anybody what a software developer does and they can give you the one-sentence "makes software" answer. Ask them what a "business person" does and you'll be lucky to get a coherent sentence. That's because business people cover a wider range of skills and responsibilities; the work they do is more varied.</p>

<p>My hunch is that most good software engineers only work for cash because they don't feel that working for equity is worth the risk of failure. They can make good money consulting or working as an employee of another company. They can easily get great benefits and a six figure salary. The risk of failure doesn't seem worth it, especially when the potential reward seems so far away. But an important distinction is that this has to do with their options, not with their profession. If we look at business people who have skills-specific training like software people have, they fall in a similar risk-averse bucket: <a href="http://www.asktheharvardmba.com/2009/07/03/how-many-graduating-harvard-mbas-start-their-own-businesses/">only 3% of Harvard MBAs use their educations to start a company</a>.</p>

<p>A more appropriate conclusion to draw from Michael's experience, and one I see first-hand in the startup world every day, is that finding good cofounders is very difficult. One need only look at the necessary traits to find that the odds are stacked against the seeker: you need somebody you trust (ideally whom you know well), who shares your ambition, who complements your strengths, who compensates for your weaknesses, who is in a life position to take a big risk, and who is in a financial position to afford to take such a risk. Forget the haystack; you're looking for a needle in a field.</p>

<p>Finding good <em>technical</em> cofounders is particularly difficult. This isn't because technical people are flakier or inherently less entrepreneurial; it's because by definition they have a narrower set of highly in-demand skills. They have lots of options because, for every one of them there are several "business people" trying to get their attention.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wordpress and the GPL]]></title>
    <link href="http://rob.by/2010/wordpress-and-the-gpl/"/>
    <updated>2010-07-15T11:23:08-04:00</updated>
    <id>http://rob.by/2010/wordpress-and-the-gpl</id>
    <content type="html"><![CDATA[<p>Yesterday, <a href="http://wordpress.org/">Wordpress</a> founder <a href="http://twitter.com/photomatt">Matt Mullenweg</a> <a href="http://mixergy.com/chris-pearson-matt-mullenweg/">debated</a> <a href="http://www.diythemes.com/">Thesis Wordpress Theme</a> founder <a href="http://twitter.com/pearsonified">Chris Pearson</a> over the ethics, legality and benefits of using the GPL license for the Thesis theme. Matt argued that by not using the GPL license, Thesis is disrespecting the Wordpress community, violating the Wordpress license agreement and hurting its own business. Chris contends that Matt has no right to tell him how to license something that Chris built himself, even though he built it on top of the Wordpress platform.</p>

<p>I'm not an attorney, but I am a human capable of reading and inferencing. The legal issues concerning the GPL seem pretty clear to me. There's a reason why Dan Rivcher is <a href="http://www.linux.com/archive/articles/113252">cited</a> by the Software Freedom Law Center's <a href="http://www.softwarefreedom.org/resources/2008/compliance-guide.html">compliance guide</a>. There's a reason why the SFLC <a href="http://wordpress.org/news/2009/07/themes-are-gpl-too/">sides with Wordpress</a>. There's a reason why lawyers at big companies tell their engineers not to use GPL open source projects. There's a reason why the LGPL exists. There's a reason why many communities, like the Ruby community, have moved to use the MIT license instead of the GPL. All of these reasons are the same: the GPL is a highly <a href="http://en.wikipedia.org/wiki/GNU_General_Public_License#Criticism">viral</a> license that infects everything it touches. If your code uses GPL, your code needs to be GPL. I don't know this because I'm a lawyer; I know it because every credible lawyer I talk to or read about or am influenced by reaches the same conclusion.</p>

<p>And I'm reminded of how well I know this, because I gave up healthy means of income in order to abide by it.<!--more--></p>

<h2>My Experience with the GPL</h2>

<p>The GPL gave me my first headache when I was in college. I was building <a href="http://www.hudsonvalleypainter.com">my mother's blog</a>, which required me to build what became <a href="/artpal">ArtPal</a>, a Wordpress plugin that lets artists post their work to their blogs and sell it with PayPal. Today, ArtPal is fairly popular for a niche plugin. It has 3,000+ downloads from artists all over the world who use it to sell their paintings, drawings, sketches and digital compositions. A modest estimate would have it responsible for hundreds of sales.</p>

<p>What is my cut? $0, thanks to the GPL. I say this without vent or complaint. I have no regrets about ArtPal being free, and I'm thrilled (really! I get a warm fuzzy feeling!) to know that the hard work I put in for my mother is helping tens or hundreds of other artists to sell their work online. I point out the following merely to explain how the GPL license can undermine the business worthiness of a technical venture.</p>

<p>I started out by retaining the full rights to ArtPal under the name of Digital Sublimity, the corporate outfit I used for my consulting work. I let myself live in denial, trying to convince myself of the argument that Chris Pearson put forward yesterday. "It's its own thing; it just adds functionality to Wordpress," I would assure to myself. "ArtPal was <em>my</em> innovation, not Automattic's." I felt I had an ethical, exclusive right to own my product, and I did not accept that the legal terms of the GPL might preclude that.</p>

<p>But some time after my first client, my intellectual curiosity won out. I read the GPL, did some googling, and accepted the truth. ArtPal integrates with and requires Wordpress to function. That makes it a "derivative work" of Wordpress, which is also GPL licensed. Consequently, I must apply the GPL license to ArtPal. From this point on, ArtPal was open sourced and formally GPLed. Doing this did not prevent me from selling ArtPal, but it did give others permission to give ArtPal away for free. It doesn't take a strong economics background to see the problem I quickly faced. While it made good resume candy, I never made another dime off of the plugin.</p>

<p>Common questions I get when I tell this story include "Did it ever bring you money in other ways? Did it ever get you new clients? Did anybody pay for support?" No, no and no. I tried. I advertised ArtPal as being commercially supported by Digital Sublimity and referred people there if they ever wanted it customized. But nobody did. The problem, I suspect, is that I built ArtPal to be simple and easy to set up. Plug in your PayPal email address, choose a "buy it" button, and you're up  and running. If you can install a PHP app on a web host, you can configure ArtPal. If you have a web guy who runs your blog, he can configure ArtPal. An end-user has no need for me. I do answer questions on my <a href="/artpal">ArtPal page</a> as they come up, but they are never in-depth enough to warrant a paid support contract.</p>

<p>The GPL effectively rendered ArtPal a pro bono project. As a part-time effort, I was unable to make it businessworthy while abiding by the full terms of the license.</p>

<h2>Why the GPL Is Good for Wordpress</h2>

<p>You might expect me to be resentful or frustrated given the aforementioned story, but I have no beef with Automattic for choosing the GPL license for Wordpress. I would probably have made the same decision if I were Automattic.</p>

<p>By GPLing Wordpress (and therefore its plugins and themes), Automattic ensures that any Wordpress user can get up and running with all the community has to offer, for free. A user may need to pay for support or for customization, but they can get any plugin or theme out of the box for $0, because the GPL stipulates a number of things that make such content freely available. This effectively lets Wordpress outsource the development of thousands of features to its developer community for free.</p>

<p>Less obviously but more importantly, it commoditizes plugins and themes, which are <a href="http://en.wikipedia.org/wiki/Complementary_good">complementary goods</a>. Joel Spolsky <a href="http://www.joelonsoftware.com/articles/StrategyLetterV.html">famously wrote about</a> this business practice known as "commoditizing the complement." More recently, Chris Dixon <a href="http://cdixon.org/2009/12/22/google-should-open-source-what-actually-matters-their-search-ranking-algorithm/">called out</a> Google for disingenuously using the same strategy. For those who aren't familiar, here's what "commoditizing the complement" means for Automattic: a blog platform + theme + plugins + hosting is worth $x to a customer. By making plugins and themes free, more of that x can be captured under "blog platform" and "hosting." Not coincidentally, "blog platform" and "hosting" are the things that Automattic sells at wordpress.com.</p>

<p>The GPL lets Automattic outsource development efforts for free while capturing a bigger piece of the pie.</p>

<h2>What the GPL Meant for Me As a Wordpress Developer</h2>

<p>The GPL limits occasional Wordpress developers like myself to service-oriented businesses. Charging for a plugin is not practical, but charging for a customization is. Designers may find themselves in similar situations where they cannot realistically charge for a stock design, but they can charge to custom-tailor it for a client.</p>

<p>One might argue that this provides a disincentive to develop plugins. Why spend all that time building it if somebody else can customize it and earn the money off it? The business counter-argument is reputation. ArtPal created a lot of possibilities for me. When I did Wordpress consulting, people had an immediate trust in my work because (1) they knew I built it and knew how to tweak it; (2) I had a strong online presence with a reputation for backing what I built; and (3) I had personal interactions with many of them in the comments section of my blog.</p>

<p>I never capitalized on any of this. The projects that people wanted me to do were too involved for what I had time for. Nobody wanted to pay me just to set up ArtPal; they wanted to pay me to set up, maintain and monitor an entire blog. But for me ArtPal was just a side project, and with a full time job I didn't have time to be a tech support guy for all of the people who wanted to use it.</p>

<p>ArtPal was too small of a project to be made into a business under the GPL. But had I wanted to create a bigger business, ArtPal would have opened the doors to a larger client base.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing for People]]></title>
    <link href="http://rob.by/2010/writing-for-people/"/>
    <updated>2010-06-21T10:23:51-04:00</updated>
    <id>http://rob.by/2010/writing-for-people</id>
    <content type="html"><![CDATA[<p>Nearly all commercial web sites perform Search Engine Optimization (SEO), whereby they alter their site to be more Google-friendly, with the hope of receiving higher search rankings. Many of these changes are purely structural and invisible to users. For instance, using tags like &lt;h1&gt; or microformats like "hreview" can help Google make more sense of existing content without any changes being made to the text.</p>

<p>Mature, profitable sites often take SEO to the next level by altering their visible content as well. In effect, they write their copy for machines instead of for people. From a user experience perspective, it shows. There is often an inherent conflict between what is best for a user and what is best for Google.<!--more--></p>

<p>An instructive example of this came in a conversation I had with <a href="http://www.sachinagarwal.com">Sachin Agarwal</a> with respect to our page titles at oneforty. The title of our home page reads "Find the Best Twitter Apps." Sachin argued, correctly, that a better title for SEO purposes would be "Find the Best Twitter Apps <em>and Twitter Tools</em>" because it would match search queries for "twitter tools." I agree completely with his analysis, but I didn't want to make the change for a few reasons:</p>

<ol>
<li><p>It's redundant.</p></li>
<li><p>It's more wordy.</p></li>
<li><p>It would read "Find the Best Twitter Apps and..." in many browsers, which leaves the reader hanging.</p></li>
<li><p>It provides no benefit to a user who is already on our site.</p></li>
</ol>


<p>Startups are different from the mature, profitable sites that can afford to play these SEO games in that they are more strictly about <a href="/2010/its-all-about-the-users/">solving users' problems and providing them optimal experiences</a>. Established companies, on the other hand, can make compelling business cases to diminish a user's experience in order to reach and help a greater number of people. I hope oneforty gets there some day, but until we do, I will tirelessly advocate for a user's experience over Google juice.</p>

<p>For a more typical example of what I'm talking about, look at the <a href="http://tripadvisor.com">TripAdvisor</a> home page. An easy way to display hotels by city would be to have a heading called "Hotels" and under it list a bunch of cities. Any human could easily understand such a presentation. But TripAdvisor does something different:</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2010/writing-for-people/hotels.png" alt="TripAdvisor.com Hotels List" /></p>

<p>Notice that it repeats the word "hotels" after each city, reading "Atlantic City hotels", "Boston hotels", "Chicago hotels", etc. It does this because it wants to rank highly in Google for queries like "Boston hotels." If it just used the word "Boston", Google wouldn't associate the link with content for a hotel (Google might be able to deduce this, but TripAdvisor doesn't want to leave that to chance). To Google this is highly descriptive content, but to a person it's cluttered and repetitive, using twice as much text as needed.</p>

<p>Redundant headings are another common form of SEO-inspired messiness. Headings are heavily-weighted in search results, and so many sites overuse them and cram them with keywords. An example of this can be seen on <a href="http://www.yelp.com/c/cambridge-ma/restaurants">Yelp's "Cambridge Restaurants" page</a>. Look at all of these redundancies:</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2010/writing-for-people/yelp-screenshot.jpg" alt="Yelp Screenshot" /></p>

<p>These phrase-based headings work wonders for Yelp's search rankings, but they make for a terrible user experience. There's no reason to tell me 9 times that I'm on the Cambridge Restaurants page when I'm the one who searched for restaurants in Cambridge. A title is fine; a heading is fine; but 9 of them is verbose and distracting. To make matters worse, the headings are all so similar that it's unclear which section actually contains what content. It's good for Google, but bad for people.</p>

<p>Writing for people is about cleanliness and brevity. Writing for Google requires clutter and redundancy. Startups should write for their users because companies need to prove their value before they market it. Any startup that's writing for Google is getting ahead of itself.</p>
]]></content>
  </entry>
  
</feed>
