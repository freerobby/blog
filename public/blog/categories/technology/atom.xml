<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Robby Grossman]]></title>
  <link href="http://rob.by/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://rob.by/"/>
  <updated>2013-07-27T15:46:14-04:00</updated>
  <id>http://rob.by/</id>
  <author>
    <name><![CDATA[Robby Grossman]]></name>
    <email><![CDATA[robby@freerobby.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remove Merged Branches from Git]]></title>
    <link href="http://rob.by/2013/remove-merged-branches-from-git/"/>
    <updated>2013-01-26T16:28:00-05:00</updated>
    <id>http://rob.by/2013/remove-merged-branches-from-git</id>
    <content type="html"><![CDATA[<p>I wrote a bash function that prunes a git repository’s ancestral branches, helping you keep your local and remote repos tidy.</p>

<p>This function removes all branches, local and remote, that have been merged into your current branch. Simply run “rmb” from the command line. Don’t worry - prompt safeguards are in place to show you what you’ll be removing before it delets anything. And it won’t let you delete “master.” :-)</p>

<p>Add this to your ~/.profile, run “source ~/.profile” and you’re good to go.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rmb.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span>rmb <span class="o">{</span>
</span><span class='line'>  <span class="nv">current_branch</span><span class="o">=</span><span class="k">$(</span>git branch –no-color 2&amp;gt; /dev/null | sed -e ‘/^<span class="o">[</span>^&lt;em&gt;<span class="o">]</span>/d’ -e ‘s/&lt;/em&gt; <span class="o">(</span>.*<span class="k">)</span>/<span class="se">\1</span>/’<span class="o">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> “<span class="nv">$current_branch</span>” !<span class="o">=</span> “master” <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> “WARNING: You are on branch <span class="nv">$current_branch</span>, NOT master.”
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> “Fetching merged branches…”
</span><span class='line'>  git remote prune origin
</span><span class='line'>  <span class="nv">remote_branches</span><span class="o">=</span><span class="k">$(</span>git branch -r –merged | grep -v ‘/master<span class="nv">$’</span> | grep -v “/<span class="nv">$current_branch$”</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">local_branches</span><span class="o">=</span><span class="k">$(</span>git branch –merged | grep -v ‘master<span class="nv">$’</span> | grep -v “<span class="nv">$current_branch$”</span><span class="k">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -z “<span class="nv">$remote_branches</span>” <span class="o">]</span> &amp;amp;&amp;amp; <span class="o">[</span> -z “<span class="nv">$local_branches</span>” <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> “No existing branches have been merged into <span class="nv">$current_branch</span>.”
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> “This will remove the following branches:”
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -n “<span class="nv">$remote_branches</span>” <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> “<span class="nv">$remote_branches</span>”
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -n “<span class="nv">$local_branches</span>” <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> “<span class="nv">$local_branches</span>”
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">read</span> -p “Continue? <span class="o">(</span>y/n<span class="o">)</span>: “ -n 1 choice
</span><span class='line'>    <span class="nb">echo</span>
</span><span class='line'><span class="nb">    </span><span class="k">if</span> <span class="o">[</span> “<span class="nv">$choice</span>” <span class="o">==</span> “y” <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> “<span class="nv">$choice</span>” <span class="o">==</span> “Y” <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>      <span class="c"># Remove remote branches</span>
</span><span class='line'>      git push origin &lt;code&gt;git branch -r --merged | grep -v <span class="s1">&#39;/master$&#39;</span> | grep -v <span class="s2">&quot;/$current_branch$&quot;</span> | sed <span class="s1">&#39;s/origin\//:/g&#39;</span> | tr -d <span class="s1">&#39;\n&#39;</span>&lt;/code&gt;
</span><span class='line'>      <span class="c"># Remove local branches</span>
</span><span class='line'>      git branch -d &lt;code&gt;git branch --merged | grep -v <span class="s1">&#39;master$&#39;</span> | grep -v <span class="s2">&quot;$current_branch$&quot;</span> | sed <span class="s1">&#39;s/origin\///g&#39;</span> | tr -d <span class="s1">&#39;\n&#39;</span>&lt;/code&gt;
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> “No branches removed.”
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to Riak at Shareaholic]]></title>
    <link href="http://rob.by/2012/migrating-to-riak-at-shareaholic/"/>
    <updated>2012-08-31T10:30:00-04:00</updated>
    <id>http://rob.by/2012/migrating-to-riak-at-shareaholic</id>
    <content type="html"><![CDATA[<p>Last night I presented “Migrating to Riak @Shareaholic” at the first <a href="http://www.meetup.com/Boston-Riak/events/77828202">Boston Riak meetup</a></p>

<p>Below are my slides from the talk.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14130056?rel=0" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen=""> </iframe>

<p>One correction that I’ve updated in the slides: I mistakenly referenced Shareaholic using Hadoop MapReduce. Shareaholic uses Amazon’s Elastic MapReduce, which works similarly to Hadoop but is a separate implementation. My reference is intended only to distinguish it from Riak’s MapReduce implementation, which is substantially different.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Risk Mitigation Strategies]]></title>
    <link href="http://rob.by/2012/aws-risk-mitigation-strategies/"/>
    <updated>2012-07-02T10:05:00-04:00</updated>
    <id>http://rob.by/2012/aws-risk-mitigation-strategies</id>
    <content type="html"><![CDATA[<p>Even if you’re not ready to roll your own hardware, there’s a lot you can do to minimize your risk of downtime on AWS, and to mitigate the effects when it’s unavoidable.<!-- more --></p>

<h3 id="plan-for-brownouts-following-blackouts">Plan for Brownouts Following Blackouts</h3>

<p>Amazon <a href="http://status.aws.amazon.com/">emphasizes</a> that only “a single availability zone” suffered EC2 and EBS outages, but that is only half the story. The cascading effects that followed are equally important.</p>

<p>For several hours on Friday night, I was unable to bring up a single instance in any of the five US-East availability zones. A commenter correctly <a href="http://news.ycombinator.com/item?id=4182137">pointed out</a> that this is what light utilization reserved instances are for, but in this case that would not have helped. The AWS web console was unreachable, as was the AWS API. I was eventually able to get an “insufficient capacity” error message, at which point a reserved instance may have been helpful, but that was hours later.</p>

<p>I’ve confirmed that others had similar experiences. A source at a company with AWS Platinum Support told me that Amazon was throttling requests and the spawning of new instances in “unaffected” US-East availability zones. It sounds like a barrage of requests came in to launch new EC2 instances in these other availability zones, and Amazon was unable to support the demand.</p>

<p>At <a href="http://shareaholic.com">Shareaholic</a> we determined a long time ago that implementing full redundancy was not worth the engineering cost. However, that was based on the assumption that if one availability zone went offline, we could bring up new instances in another one immediately to keep our core services operating. This proved to be a flawed assumption. We did not anticipate that the loss of one availability zone would create more demand than Amazon could handle in the other four.</p>

<h3 id="use-automated-infrastructure-to-save-time-and-headaches">Use Automated Infrastructure to Save Time and Headaches</h3>

<p>Without exception, what saves me the most time recovering from an AWS outage is that our infrastructure stack is automated with Chef. Deploying new code or provisioning a new server requires only one terminal command.</p>

<p>Automated infrastructure also provides an additional benefit: it serves as documentation for the configuration of every server. Not sure what your haproxy.cfg should look like? It’s in Chef. Not sure how to setup your MySQL slave? It’s in Chef.</p>

<p>Whether you use Chef, Puppet, Rubber or homegrown deploy scripts, having an automated infrastructure stack saves you time and ensures that you aren’t struggling to piece together a working config file at a critical moment.</p>

<h3 id="use-low-ttl-values-for-faster-dns-updates">Use Low TTL Values for Faster DNS Updates</h3>

<p>At Shareaholic, we set a very low DNS TTL value (300 seconds) on our top level domain so that we can push out DNS updates within five minutes. Unfortunately, this is not 100% reliable: some ISPs do not enforce these low TTL values because they require more frequent fetching. Users of such ISPs resultantly see longer downtime than everybody else. Users whose ISPs react properly receive correct IP addresses within five minutes from when we push an update.</p>

<p>This, combined with our use of Chef, is our best shot at restoring downed services in minutes rather than hours.</p>

<h3 id="use-virtualized-hardware-not-services-to-reduce-risk-of-outages">Use Virtualized Hardware, Not Services, to Reduce Risk of Outages</h3>

<p>Amazon Web Services can be used either to virtualize raw hardware (EC2 instances with instance storage) or to virtualize core web services (ELB, EBS, RDS, etc.). This weekend’s ELB, EBS and RDS failures demonstrate that you are at much greater risk of a service disruption if you use the latter. None of our instance storage EC2 instances suffered outages.</p>

<p>For this reason, at Shareaholic, we’ve avoided using AWS’ proprietary services whenever possible. Instead of using ELB, we run our own <a href="http://haproxy.1wt.eu/">HAProxy</a> load balancers. This has reliably fixed the problem of visitors getting directed to unresponsive instances when they go down. Unfortunately, it also means that we own the burden of implementing redundant load balancers. We got burned when the AWS API timed out, prohibiting us from reassigning our Elastic IP addresses to our redundant machines. However, we were still able to get our home-grown load balancers back up hours before Amazon resolved its ELB failures.</p>

<p>We’ve rolled our own MySQL, Redis, MongoDB and Riak for the same reason. We still suffered downtime because we rely on EBS (which is something we’ll work to avoid in the future), but our recovery efforts were made easier and more timely by the fact that we manage our data and load balancing stacks in-house.</p>

<h3 id="determine-in-advance-what-risks-youre-willing-to-take">Determine in Advance What Risks You’re Willing to Take</h3>

<p>My post-downtime debrief boils down to one question:</p>

<p><em>Knowing what we know now, what engineering work would have been worth doing in advance to mitigate the downtime we just had?</em></p>

<p>Usually my answer to this question is “none.” This varies by business, but a few hours to a day of downtime per year is often less expensive than the engineering required to avoid it.</p>

<h3 id="in-conclusion">In Conclusion</h3>

<p>Amazon Web Services is not one big service that stays up or goes down. It is comprised of many services of varying complexity. By understanding their individual reliabilities, organizations can engineer around many of AWS’ shortcomings.</p>

<p>Still, there’s no silver bullet. When things do go wrong, the responsibility of recovery falls on you, the AWS customer. By determining in advance what risks you’re willing to take, preparing your DNS for faster updates and automating the generation of your infrastructure, you can respond more quickly when you need to.</p>

<p><em>Thanks to <a href="http://graysky.org">Mike Champion</a> and <a href="http://nirvdrum.com">Kevin Menard</a> for proofreading this post.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GarageBand Has Found Its Interface]]></title>
    <link href="http://rob.by/2011/garageband-has-found-its-interface/"/>
    <updated>2011-03-16T00:29:55-04:00</updated>
    <id>http://rob.by/2011/garageband-has-found-its-interface</id>
    <content type="html"><![CDATA[<p>This is what you can do with GarageBand for iPad in about 2 hours:</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://robby-blog.s3.amazonaws.com/music/garage-band-jam.m4a' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video><!--more--></p>

<p><a href="http://robby-blog.s3.amazonaws.com/music/garage-band-jam.m4a">Download link</a></p>

<p>I wrote this song for the purpose of trying GarageBand for iPad this evening. I used vocals, guitars and virtual instruments in ways that I believe most people would use them, and I capped the project at two hours.</p>

<h2 id="composition">Composition</h2>

<p>The above song was recorded entirely on a <strong>first generation iPad</strong>. It consists of eight virtual tracks: two recorded acoustic guitars, two recorded vocal tracks, two recorded electric guitars, a virtual bass, and a virtual drumkit. All audio tracks were recorded with the iPad’s internal condenser microphone.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Final_Track_Layout.png" alt="Final Track Layout" /></p>

<h2 id="recording-process">Recording Process</h2>

<p>The two acoustic guitar tracks are panned about 75% left and 75% right. The left is strumming chords; the right is alternating between chords and arpeggiated notes. I chose the “small room” preset for both to provide ambiance.</p>

<p>The two vocal tracks are separate takes of the same lines, panned about two thirds left and two thirds right. This process provides a full sound without requiring any unnatural reverb (Elliott Smith is perhaps best known for using this technique; John Lennon and Bon Iver have also employed it).</p>

<p>The two electric guitar tracks are panned about 60% each way. These are not virtual instruments; they are real electric guitars played through a Fender Pro Junior amp. I struggled to maintain a consistent volume because even at 15 watts my Pro Junior was too loud for the iPad’s internal mic. I got the levels manageable with a makeshift damper made from tissues.</p>

<p>I created the virtual bass lines by plucking individual strings from chords in the selected key. Non-musicians will appreciate this method because they can improvise without the risk of playing out of key. Musicians, and particularly composers, will find this limiting. There were a couple times when I wanted to create dissonance, and had to change the key in order to pluck an intermediate semitone.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Virtual_Bass.png" alt="GarageBand Virtual Bass" /></p>

<p>The virtual drumkit is by far the most fun part of creating songs. GarageBand provides two ways to lay down your beats:</p>

<p>The first is a clickable drumset that plays the drum you tap at the time you tap it. Overdubs are allowed within a single track, so you can focus on one drum per take and get the timing right. If you have a specific drumbeat in your head, this is the method you’ll need to use to translate it for the virtual drumset. GarageBand lets you quantize virtual instruments (up to the nearest 64th note), so you can stay on rhythm even if your hands aren’t perfect.</p>

<p>The other means of entry is a grid onto which you place drums. The grid ranges from simple to complex and from quiet to loud. If you want to experiment with beats or just get a rhythm down to record with (metronomes are boring), this is the quickest way to get up and running. You can also click the die to generate a random beat.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/Virtual_Drums.png" alt="GarageBand Virtual Drums" /></p>

<h2 id="impressions">Impressions</h2>

<p>GarageBand has found its interface (spoiler: it comes in a 9.7” version, but not 13”, 15” or 17”). Buttons that you actually push. Sliders that you actually slide. Drums that you actually hit. Good riddance, mouse; you will not be missed. It feels like this is what the iPad was made to do.</p>

<p>But the impressiveness of the interface is only half of why GarageBand for iPad is so great. The other half is that Apple has proven that the whole of the iPad is greater than the sum of its parts. It isn’t that the GarageBand keyboard has better sensitivity and sound than Pianist (though it does), or that the virtual guitar is easier to use than Air Guitar (though it is), or that the beat sequencers are easier to use than Korg’s iElectribe (though they are), or that the drums sound better than those of JamPad (though they do), or that the recording interface is smoother than FourTrack’s (though it is). It’s that all of these things are now integrated perfectly into part of a larger whole. It is an all-in-one-piece music creation suite, and it is the most capable one on the market.</p>

<p>The closest competition it has is the <a href="http://www.bossus.com/gear/productdetails.php?ProductId=818">Boss Micro BR</a>, which trails far behind in several respects. GarageBand is easy and intuitive to use while the Micro BR’s functionality is arcane; GarageBand supports eight tracks while the Micro BR supports only four; GarageBand provides several virtual instruments while the Micro BR provides none. The Micro BR is smaller (5.5”x3.25x0.875”), which makes it slightly more portable, but this also contributes to its poor usability. My Micro BR has served me well for years. Tomorrow it goes up on Craigslist.</p>

<p><img src="http://robby-blog.s3.amazonaws.com/2011/garageband-has-found-its-interface/micro-br.jpg" alt="Boss Micro BR" /></p>

<h2 id="room-for-improvement">Room for Improvement</h2>

<p>I’d like to see an input level adjustment in the next version. Controlling individual track volumes at playback time is not sufficient for this purpose, especially for songs that vary from quiet vocals to loud, distorted guitars.</p>

<p>A more traditional drum machine interface (with individual tracks for each drum laid out on a timeline) would be helpful for creating drumbeats that exist in my head. The touch sensitivity of the on-screen drumset is impressive but imperfect. It’s frustrating to get through 14 out of 16 measures and then miss a beat.</p>

<p>The condenser mic in my iPad (again, first generation) is acceptable, but leaves something to be desired, particularly on the high end. I don’t know if this mic has been upgraded in the iPad2, but something of higher quality would be much appreciated. In the mean the <a href="http://www.amazon.com/Blue-Microphones-Yeti-USB-Microphone/dp/B002VA464S/ref=sr_1_1?ie=UTF8&amp;qid=1300250784&amp;sr=8-1">Blue Yeti</a> is an excellent USB microphone, and works with the <a href="http://store.apple.com/us/product/MC531ZM/A">camera connection kit</a>. Obviously, this makes the setup much less portable.</p>

<h2 id="a-note-on-ipad-vs-ipad-2-performance">A Note on iPad vs iPad 2 Performance</h2>

<p>GarageBand’s performance on my first generation iPad was noticeably but not painfully sluggish. The most frequent lag occurs when switching between the track and recording screens. It lasts for about one second.</p>

<p>There is another lag, longer in duration but less frequent in occurrence, that I ran into seemingly arbitrarily. A box will pop up that says “Optimizing Performance” and you will have to wait 15-20 seconds while it chugs along. I encountered this four or five times over the course of two hours. I suspect what GarageBand is doing is loading audio content into and out of RAM. If that’s the case, then performance should be better on the iPad 2, which has 512MB as opposed to the 256MB of the original.</p>

<h2 id="tldr">TL;DR</h2>

<p>GarageBand for iPad is the most complete and capable all-in-one music creation package available anywhere. It’s fun, it’s easy, and it’s effective. At $4.99, it has replaced my $220 Micro BR.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middle Management for Your Heroku Workers]]></title>
    <link href="http://rob.by/2011/middle-management-for-your-heroku-workers/"/>
    <updated>2011-01-20T10:52:03-05:00</updated>
    <id>http://rob.by/2011/middle-management-for-your-heroku-workers</id>
    <content type="html"><![CDATA[<p>Heroku provides a highly scalable <a href="http://docs.heroku.com/background-jobs">background worker framework via delayed_job</a>, but leaves the burden of scaling it to the user. Several people have tried to solve this by either <a href="https://github.com/wxmn/delayed_job">forking the delayed_job gem</a> or hooking into the gold standard <a href="https://github.com/phaza/Heroku-Delayed-Job-Autoscale">collectiveidea gem</a>. I like the latter approach, but haven’t seen an implementation that meets my requirements.<!--more--></p>

<p>Specifically, I want the following in my scaling library:</p>

<ol>
  <li>
    <p>Don’t require any special third party forks.</p>
  </li>
  <li>
    <p>Let me set minimum and maximum worker counts – and change them without redeploying.</p>
  </li>
  <li>
    <p>Let me set how busy I want my workers to be.</p>
  </li>
  <li>
    <p>Work out of the box with minimal configuration.</p>
  </li>
</ol>

<p>To achieve these things, I built <a href="https://github.com/freerobby/middle_management">middle_management</a>.</p>

<p>You can get up and running with it very quickly:</p>

<ol>
  <li>
    <p>Add “middle_management” to your Gemfile</p>
  </li>
  <li>
    <p>Set the required heroku environment variables (MIDDLE_MANAGEMENT_HEROKU_USERNAME, MIDDLE_MANAGEMENT_HEROKU_PASSWORD, MIDDLE_MANAGEMENT_HEROKU_APP, MIDDLE_MANAGEMENT_MIN_WORKERS, MIDDLE_MANAGEMENT_MAX_WORKERS).</p>
  </li>
  <li>
    <p>Deploy.</p>
  </li>
</ol>

<p>The <a href="https://github.com/freerobby/middle_management">code</a> is on github and the <a href="https://rubygems.org/gems/middle_management">gem</a> is on Rubygems. Check out the <a href="https://github.com/freerobby/middle_management/blob/master/README">readme</a> for further details.</p>
]]></content>
  </entry>
  
</feed>
