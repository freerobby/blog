<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Startups | Robby Grossman]]></title>
  <link href="http://rob.by/blog/categories/startups/atom.xml" rel="self"/>
  <link href="http://rob.by/"/>
  <updated>2012-12-15T20:05:25-05:00</updated>
  <id>http://rob.by/</id>
  <author>
    <name><![CDATA[Robby Grossman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS Risk Mitigation Strategies]]></title>
    <link href="http://rob.by/2012/aws-risk-mitigation-strategies/"/>
    <updated>2012-07-02T10:05:00-04:00</updated>
    <id>http://rob.by/2012/aws-risk-mitigation-strategies</id>
    <content type="html"><![CDATA[<p>Even if you're not ready to roll your own hardware, there's a lot you can do to minimize your risk of downtime on AWS, and to mitigate the effects when it's unavoidable.<!-- more --></p>

<h3>Plan for Brownouts Following Blackouts</h3>

<p>Amazon <a href="http://status.aws.amazon.com/">emphasizes</a> that only "a single availability zone" suffered EC2 and EBS outages, but that is only half the story. The cascading effects that followed are equally important.</p>

<p>For several hours on Friday night, I was unable to bring up a single instance in any of the five US-East availability zones. A commenter correctly <a href="http://news.ycombinator.com/item?id=4182137">pointed out</a> that this is what light utilization reserved instances are for, but in this case that would not have helped. The AWS web console was unreachable, as was the AWS API. I was eventually able to get an "insufficient capacity" error message, at which point a reserved instance may have been helpful, but that was hours later.</p>

<p>I've confirmed that others had similar experiences. A source at a company with AWS Platinum Support told me that Amazon was throttling requests and the spawning of new instances in "unaffected" US-East availability zones. It sounds like a barrage of requests came in to launch new EC2 instances in these other availability zones, and Amazon was unable to support the demand.</p>

<p>At <a href="http://shareaholic.com">Shareaholic</a> we determined a long time ago that implementing full redundancy was not worth the engineering cost. However, that was based on the assumption that if one availability zone went offline, we could bring up new instances in another one immediately to keep our core services operating. This proved to be a flawed assumption. We did not anticipate that the loss of one availability zone would create more demand than Amazon could handle in the other four.</p>

<h3>Use Automated Infrastructure to Save Time and Headaches</h3>

<p>Without exception, what saves me the most time recovering from an AWS outage is that our infrastructure stack is automated with Chef. Deploying new code or provisioning a new server requires only one terminal command.</p>

<p>Automated infrastructure also provides an additional benefit: it serves as documentation for the configuration of every server. Not sure what your haproxy.cfg should look like? It's in Chef. Not sure how to setup your MySQL slave? It's in Chef.</p>

<p>Whether you use Chef, Puppet, Rubber or homegrown deploy scripts, having an automated infrastructure stack saves you time and ensures that you aren't struggling to piece together a working config file at a critical moment.</p>

<h3>Use Low TTL Values for Faster DNS Updates</h3>

<p>At Shareaholic, we set a very low DNS TTL value (300 seconds) on our top level domain so that we can push out DNS updates within five minutes. Unfortunately, this is not 100% reliable: some ISPs do not enforce these low TTL values because they require more frequent fetching. Users of such ISPs resultantly see longer downtime than everybody else. Users whose ISPs react properly receive correct IP addresses within five minutes from when we push an update.</p>

<p>This, combined with our use of Chef, is our best shot at restoring downed services in minutes rather than hours.</p>

<h3>Use Virtualized Hardware, Not Services, to Reduce Risk of Outages</h3>

<p>Amazon Web Services can be used either to virtualize raw hardware (EC2 instances with instance storage) or to virtualize core web services (ELB, EBS, RDS, etc.). This weekend's ELB, EBS and RDS failures demonstrate that you are at much greater risk of a service disruption if you use the latter. None of our instance storage EC2 instances suffered outages.</p>

<p>For this reason, at Shareaholic, we've avoided using AWS' proprietary services whenever possible. Instead of using ELB, we run our own <a href="http://haproxy.1wt.eu/">HAProxy</a> load balancers. This has reliably fixed the problem of visitors getting directed to unresponsive instances when they go down. Unfortunately, it also means that we own the burden of implementing redundant load balancers. We got burned when the AWS API timed out, prohibiting us from reassigning our Elastic IP addresses to our redundant machines. However, we were still able to get our home-grown load balancers back up hours before Amazon resolved its ELB failures.</p>

<p>We've rolled our own MySQL, Redis, MongoDB and Riak for the same reason. We still suffered downtime because we rely on EBS (which is something we'll work to avoid in the future), but our recovery efforts were made easier and more timely by the fact that we manage our data and load balancing stacks in-house.</p>

<h3>Determine in Advance What Risks You're Willing to Take</h3>

<p>My post-downtime debrief boils down to one question:</p>

<p><em>Knowing what we know now, what engineering work would have been worth doing in advance to mitigate the downtime we just had?</em></p>

<p>Usually my answer to this question is "none." This varies by business, but a few hours to a day of downtime per year is often less expensive than the engineering required to avoid it.</p>

<h3>In Conclusion</h3>

<p>Amazon Web Services is not one big service that stays up or goes down. It is comprised of many services of varying complexity. By understanding their individual reliabilities, organizations can engineer around many of AWS' shortcomings.</p>

<p>Still, there's no silver bullet. When things do go wrong, the responsibility of recovery falls on you, the AWS customer. By determining in advance what risks you're willing to take, preparing your DNS for faster updates and automating the generation of your infrastructure, you can respond more quickly when you need to.</p>

<p><em>Thanks to <a href="http://graysky.org">Mike Champion</a> and <a href="http://nirvdrum.com">Kevin Menard</a> for proofreading this post.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responding to Criticism]]></title>
    <link href="http://rob.by/2011/responding-to-criticism/"/>
    <updated>2011-05-17T10:00:13-04:00</updated>
    <id>http://rob.by/2011/responding-to-criticism</id>
    <content type="html"><![CDATA[<p>In 2006 I participated in <a href="http://www.nols.edu/courses/locations/alaska/aksemester.shtml">NOLS' Summer Semester in Alaska</a>, a 75-day kayaking, backpacking and mountaineering course, which helps students gain wilderness and leadership skills.</p>

<p>A few days in I got my first review. I was a wreck. I packed my backpack as if I were paying homage to the Leaning Tower of Pisa. The most palatable meals I cooked were the ones that were burned beyond recognition. I might have been able to properly affix a rainfly to a tent, but I'll never know because nobody trusted me to keep their tent dry. You know that guy who played on your middle school basketball team who had great hustle and personality but couldn't make a layup? The guy the coach wanted to do well, but would never take chances with in the 4th quarter? That was me at the start of my first NOLS course.<!--more--></p>

<p>My second review provided a laundry list as long as the first one. "Is there <em>anything</em> I'm doing right?", I fished. The instructor looked me squarely in the eyes and told me that I'm accepting and responding to their criticisms very well - certainly better than anybody else on the trip, and maybe better than any other student he's had. If I were young and stupid, I'd have thought this was the most condescending thing he could possibly say to me. Oh wait, I was young and stupid, and that's exactly what I thought. Miraculously aware that acting somber or exploding would be of no value, I swallowed and said "thanks."</p>

<p>I later came to understand that my instructor had actually paid me one of the most gracious compliments I'd ever receive. Over the next week, my skills improved -- not hugely, but demonstrably. I continued receiving feedback and making iterative progress over the duration of the course, and it eventually became clear to me, and to others, that I had more than paid off my skills deficit.</p>

<p>The reason I was so offended at first is that I thought that taking criticism was the standard of a student in a student-teacher relationship. To me it was like force-praising a bad teacher by saying "you do a great job showing up to class everyday." <em>That's what you'd say to a teacher who had no teaching skills.</em> But I quickly learned that my analogy was flawed. Taking criticism was a skill in itself. There were students who did not take feedback well. To this day I feel very sorry for them, because they lost out on 75 days worth of fantastic wilderness lessons.</p>

<p>And here's why: nobody was willing to criticize these people after the first week because everybody knew it would lead to conflict. And so by the mountaineering section, when I was getting advanced critiques on navigating through a whiteout (very, very difficult), the more defensive folks were just trotting along, with the same navigation skillsets they had when they started.</p>

<p>Eventually I returned to civilization, and a while later I got my first job. I learned that people function exactly the same way in the office. I've seen people at work who take criticism well and respond with a thank you. They continue to get constructive feedback because people feel safe giving it to them. I've also seen people who explode in the way that I miraculously avoided despite being young and stupid. I feel sad when I see people do this, because I know that when everybody else is learning the advanced techniques for navigating their corporate worlds (very, very difficult), these people will be trotting along, the same as they were when they started.</p>

<p>Do everything you can to be in that first group of people. No matter how harsh or personal or crushing someone's feedback feels, take it constructively and with the best of intentions. Show them gratitude for having the courage to help you in a way that was probably uncomfortable for them. If you don't respond positively, they'll never be honest with you again and you'll miss out on a lot of invaluable learning opportunities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing for People, Part 2]]></title>
    <link href="http://rob.by/2011/writing-for-people-part-2/"/>
    <updated>2011-04-18T00:03:22-04:00</updated>
    <id>http://rob.by/2011/writing-for-people-part-2</id>
    <content type="html"><![CDATA[<p>Last year I <a href="/2010/writing-for-people">wrote</a> about the importance of writing for people rather than search engines, two target audiences that often compete with each other on the web.</p>

<p>A similar problem occurs when authors write for companies instead of people. I see this most at business-to-business companies, where the customer is another company rather than a human. It's important to remember that it's always a human who will be reading your copy.<!--more--></p>

<p>One way to make that easier is to imagine the people who are reading your copy. Conjuring that image forces you to speak to them on their terms. I think a leading cause of corporate nonsense speak is the  failure of copywriters to personify the audience they're talking to.</p>

<p>For the benefit of my <a href="http://www.extension.harvard.edu/courses/spch.jsp#e-130">Executive Speaking</a> classmates, many of whom work at big business-to-business companies, I decided to make my final semester speech on this topic.</p>

<p>The slides contain several examples, citing both successes and failures. You can <a href="http://robby-blog.s3.amazonaws.com/2011/writing-for-people-part-2/Writing-for-People.pdf">download them</a> or view them below.</p>

<div style="width:595px" id="__ss_7659704"><iframe src="http://www.slideshare.net/slideshow/embed_code/7659704" width="595" height="497" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0" allowfullscreen></iframe></div>


<h2>Credits</h2>

<p>A few of my examples came from UX Designer <a href="http://www.natashascorner.com/">Natasha Lloyd</a>. Specific citations are at the bottom of each applicable slide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leadership]]></title>
    <link href="http://rob.by/2011/leadership/"/>
    <updated>2011-02-10T10:29:31-05:00</updated>
    <id>http://rob.by/2011/leadership</id>
    <content type="html"><![CDATA[<p>Leaders show themselves in various forms. There are rhetorical magicians (Barack Obama) and iconic revolutionaries (Steve Jobs). There are also workplace leaders - the silver-tongued employee who can articulate issues several steps beyond what others are thinking, or the clever, diligent coworker whose performance alone encourages others.</p>

<p>Whatever the kind, leaders have three priceless skills: they're doers, they persuade, and they inspire.<!--more--></p>

<h2>Be a Doer</h2>

<p>This is widely accepted as an absolute necessity in startup circles, so I'll leave it at that and let you read <a href="http://37signals.com/rework/">37signals' take on it</a> if you want an explanation (see chapter: "Everybody Works").</p>

<h2>Persuasion</h2>

<p>To persuade is to find common ground among your audience, anchor into it, and use it to lead them stepwise through your train of thought, arriving with you at your conclusion or solution. It is a very logically-grounded process, almost entirely syllogistic, but with enough color along the way to keep people interested and motivated to take the next step with you.</p>

<p>At SAP I had the pleasure of working alongside Bob McCarty, an excellent persuasive leader. Sprint planning meetings were often a mess, with total incongruence between business needs and engineering needs. Management wanted more features out of a codebase that wasn't ready for it, and engineering wanted to take enormous amounts of time to fix things that probably weren't worth fixing.</p>

<p>Bob, a senior engineer, had a natural knack not only for seeing what was most important for the company, but for walking the rest of us through his thinking in a way that engendered a room full of "oh yeah, yeah!"s. We all knew where we were, but it took a Bob to see where we needed to get to. There was nothing magical about how Bob operated; he just had a lot of foresight and logical consistency, and used those things to build trust and get everybody on the same page.</p>

<h2>Inspiration</h2>

<p>Inspiration is taking something that seems impossible and making people believe they can accomplish it anyway. This lends itself to metaphor and abstract expression more than persuasion does, but fluffy thinkers are not off the hook: to sell your case, you have to convince your audience that they can really achieve this seemingly impossible task. If you don't convince them, you'll come across as naive and be ignored.</p>

<p>The proven way to convince someone that the impossible is possible is to paint them a picture of it and give them something tangible to do. Unlike persuasive leadership, you don't need to guide them all the way to the solution; you just need to show them what success looks like, and give them an actionable first step that they feel puts them on the correct trajectory.</p>

<p>Obama, for instance, when running for President in 2008, convinced supporters that America could pass health care reform. It didn't take a cynic to find this daunting. Health care has long been rigged by lobbyists on both sides, and Hillarycare suffered a demoralizing defeat in the mid-90s. These facts were inescapable in the minds of reform supporters, leaving them no reason for optimism.</p>

<p>But Obama was still able to sell it. He painted a picture of what success looked like, by speaking of an America that no longer sends the sick home from hospitals or the disabled into bankruptcy. He pointed to his <a href="http://www.washingtonpost.com/wp-dyn/content/article/2008/01/03/AR2008010303303.html">history</a> of delivering on seemingly impossible legal agendas, and he explained that his bipartisan methods were the first step towards bringing that change to Washington. With that, he gave them a first step - to vote for him.</p>

<h2>When to Use What</h2>

<p>When should you persuade and when should you inspire? Here's a good rule of thumb: when a path from a problem to a solution is clear to you, persuade your audience to follow that path. If a solution is unclear, inspire them to find it with you.</p>

<p>Bob was able to map out a full solution to our sprint planning problem in his head and walk us through it. Obama, on the other hand, could not have possibly foreseen the political calculus that would exist two years later, so he opted instead to inspire us to get there with him.</p>

<p>When you're leading others, consider which approach makes more sense. For an early, idea-stage startup, inspirational leadership will keep people's minds open and ambitious. On the other hand, if you've found your revenue model, it's probably time to paint the complete picture of what success looks like and explain to your team how they fit into that picture.</p>

<h2>Credits</h2>

<p><em>I became aware of most of this while taking Professor <a href="http://www.stevendcohen.net/">Steven D. Cohen</a>'s <a href="http://isites.harvard.edu/icb/icb.do?keyword=k65765">public speaking class</a> in 2010. Steven deserves credit for much of what I've explained above, and I recommend his class to anybody who wants to become a better leader, speaker or writer.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Technical Cofounders Is Hard]]></title>
    <link href="http://rob.by/2010/finding-technical-cofounders-is-hard/"/>
    <updated>2010-08-17T10:18:25-04:00</updated>
    <id>http://rob.by/2010/finding-technical-cofounders-is-hard</id>
    <content type="html"><![CDATA[<p>Yesterday, Michael Pope posted an article titled <a href="http://captainrecruiter.blogspot.com/2010/08/technical-co-founders-are-myth.html"><em>Technical Cofounders Are a Myth</em></a>. He argued that software engineers don't finish what they start, and that you're better off paying a technical person than partnering with one. His frustrations are valid and not uncommon, but his conclusions are way off base for a lot of reasons.<!--more--></p>

<p>He begins by explaining how he arrived at his conclusion:</p>

<blockquote><p>I began the hunt to find a technical co-founder - a software engineer  who works for no cash - to help me build my dream website.  Twelve  months into my startup journey I had four half-built websites that had  been built by my four ex-technical co-founders.</p></blockquote>

<p>It's entirely possible that he picked four flaky technical cofounders. But it's also possible that:</p>

<ul>
<li><p>He didn't communicate his idea and vision well enough for them to be implemented.</p></li>
<li><p>His idea was too vague or his vision changed too often to be fully realized.</p></li>
<li><p>He had trouble selling his  credentials to his cofounders, causing them to lose faith in him.</p></li>
<li><p>He was a <a href="http://rob.by/wp-content/uploads/everybodyworks.png">delegator, not a doer</a>. (link goes to <em>Everybody Works</em> from 37signals' <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1282018997&amp;sr=8-1">Rework</a>)</p></li>
<li><p>He picked engineers who were technically-driven but not entrepreneurially-driven.</p></li>
<li><p>He picked engineers who weren't comfortable taking risks as great as he wanted to take.</p></li>
<li><p>He was difficult to work with.</p></li>
<li><p>His cofounders felt he wasn't was pulling his own weight.</p></li>
</ul>


<p>I don't know Michael, and I'm not leveling any accusations here. There are many possibilities for what went wrong. But the simple fact that things did go wrong is not a referendum on the value of having a technical cofounder, nor is it sufficient evidence to conclude that good technical cofounders don't exist.</p>

<p>Michael's second problem comes from holding software engineers to an unprecedented standard of business savviness:</p>

<blockquote><p>Most software engineers aren't business people.  The only way a software  engineer can tell a business idea is a viable is to see the money  coming in.  A business geek with no money and no income isn't going to  inspire confidence in a software geek.  If a software geek really wants  to try building something for no pay, they're going to work for themself  instead of following another cashless entrepreneur.</p></blockquote>

<p>There are three double standards here. First, it's true that "most software engineers aren't business people." But it's also true that most <em>people</em> aren't business people. If you are looking for a business-savvy technical cofounder, then your requirement is not merely a "software engineer." I'm a fan of Micah Baldwin's post on <a href="http://learntoduck.com/micah/hackers-hustlers">Hackers and Hustlers</a>. If you want a technical cofounder, look for a hacker as Micah describes it.</p>

<p>Second, <em>nobody</em> knows the viability of a business idea without seeing financial numbers. Picking winners is <a href="http://www.slideshare.net/angelbootcamp/simeon-simeonov-june-2010">extremely difficult, and doesn't work</a>. When it comes to picking the next big thing, the best VCs have worse batting averages than MLB pitchers. It's not just software engineers who are lacking in this department. Furthermore, there's more to a business than the idea. There's the team. There's execution. There's competition. None of these things are entirely predictable, even for the most savvy people in the industry. If they were predictable, investing wouldn't have risk.</p>

<p>Third, most people, not just software engineers, would choose to work for themselves if they could do it in a financially viable and risk-minimized way. What makes software engineers different in the startup world is that they have the requisite skills to hack together an idea on their own if they so choose. But software engineers also pay a price for working by themselves. It means they have to deal with finances and customers and investors and other things that aren't what they love to do, which is building software. I have side projects, and I hold entrepreneurial ambitions. I absolutely want cofounders when the time comes.</p>

<p>Michael's last gripe is that "software engineers don't work for free." I believe that by this he means they want cash rather than equity. Based on counterexamples I know for a fact that this is an over-generalization. But conceptually it does ring of some truth. Let's examine why this is the case.</p>

<p>"Business people" and "software people" are misnomers. A  "business person" can fall anywhere on the charts of aptitude, skills, education, experience, wits, and a handful of other areas relevant to starting a company. A "software person" on the other hand is more narrowly defined. Skills and education are a known quantity, and experience is more easily described. These traits of a software engineer are always in demand by a great number of companies.</p>

<p>Business people have it tougher. A business person may have equal or more valuable skills than a software person, but they   are not universally understood in the simplistic way that software people's skills are. Ask anybody what a software developer does and they can give you the one-sentence "makes software" answer. Ask them what a "business person" does and you'll be lucky to get a coherent sentence. That's because business people cover a wider range of skills and responsibilities; the work they do is more varied.</p>

<p>My hunch is that most good software engineers only work for cash because they don't feel that working for equity is worth the risk of failure. They can make good money consulting or working as an employee of another company. They can easily get great benefits and a six figure salary. The risk of failure doesn't seem worth it, especially when the potential reward seems so far away. But an important distinction is that this has to do with their options, not with their profession. If we look at business people who have skills-specific training like software people have, they fall in a similar risk-averse bucket: <a href="http://www.asktheharvardmba.com/2009/07/03/how-many-graduating-harvard-mbas-start-their-own-businesses/">only 3% of Harvard MBAs use their educations to start a company</a>.</p>

<p>A more appropriate conclusion to draw from Michael's experience, and one I see first-hand in the startup world every day, is that finding good cofounders is very difficult. One need only look at the necessary traits to find that the odds are stacked against the seeker: you need somebody you trust (ideally whom you know well), who shares your ambition, who complements your strengths, who compensates for your weaknesses, who is in a life position to take a big risk, and who is in a financial position to afford to take such a risk. Forget the haystack; you're looking for a needle in a field.</p>

<p>Finding good <em>technical</em> cofounders is particularly difficult. This isn't because technical people are flakier or inherently less entrepreneurial; it's because by definition they have a narrower set of highly in-demand skills. They have lots of options because, for every one of them there are several "business people" trying to get their attention.</p>
]]></content>
  </entry>
  
</feed>
